name: lint and test

on:
  push:
  workflow_dispatch:

jobs:
  linter:
    name: Linter
    runs-on: ubuntu-22.04
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.1'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # Run black
      #----------------------------------------------
      - name: Run black
        run: poetry run black .

      #----------------------------------------------
      # Run isort
      #----------------------------------------------
      - name: Run isort
        run: poetry run isort .

      #----------------------------------------------
      # Run flake8
      #----------------------------------------------
      - name: Run flake8
        run: poetry run flake8 .

      #----------------------------------------------
      # Run mypy
      #----------------------------------------------
      - name: Run mypy
        run: poetry run mypy --pretty .


  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: [Linter]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #----------------------------------------------
      # Prepare commit info for deploy
      #----------------------------------------------
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      #----------------------------------------------
      # Extact commit info for build
      #----------------------------------------------
      - name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.GITHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
      #----------------------------------------------
      # Prepare for building image
      #----------------------------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
      #----------------------------------------------
      # Auth to docker hub
      #----------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #----------------------------------------------
      # Build and upload image
      #----------------------------------------------
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          ulimit: nofile=1048576:1048576
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max